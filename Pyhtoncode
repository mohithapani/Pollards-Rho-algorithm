import time
start_time = time.time()
def modseperation(x):
       #partitioning
        return (x + 1) % 3

def extended_euclid_method(a, b) :
        if b == 0 :
                return (a, 1, 0)
        else :
                (d, xx, yy) = extended_euclid_method(b, a % b)
                x = yy
                y = xx - (a / b) * yy
                return (d, x, y)

def inverse(a, n):
        return extended_euclid_method(a, n)[1]

def calculateparameters(x, a, b):
    #calculating x1, x2, a and b
        modval = modseperation(x)
        if modval == 0:
                return beta * x % P, a, b + 1 % N
        elif modval == 1:
                return x * x % P, 2 * a % N, 2 * b % N
        else: 
                return alpha * x % P, a + 1 % N, b

P = 2199023255867 #(Prime number)
alpha =3 #( Generator )
beta = 1228035139812 #log (to the base alpha) beta = x (discrete log)
N = (P - 1) / 2#(order of a large prime number)

def pollard():
        
        #x1
        x_i, a_i, b_i = 1, 0, 0
        #x2
        x_2i, a_2i, b_2i  = calculateparameters(1, 0, 0)
        while x_i != x_2i:
                x_i, a_i, b_i  = calculateparameters(x_i, a_i, b_i)
                #Calculating x2 twice
                x_2i, a_2i, b_2i  = calculateparameters(x_2i, a_2i, b_2i)
                x_2i, a_2i, b_2i  = calculateparameters(x_2i, a_2i, b_2i)
        #r=bdiff
        adiff, r = a_2i - a_i, b_i - b_2i
        if r == 0:
                return 'No inverse exist'
        if adiff < 0:
                adiff = adiff + N
        if r < 0:
                r = r + N

        return inverse(r, N) * adiff % N

print pollard()
print("--- %s seconds ---" % (time.time() - start_time))
